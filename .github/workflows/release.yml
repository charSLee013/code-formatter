name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'master'
      release_name:
        description: 'Name of the release'
        required: true
        default: 'Test Release'

jobs:
  build:
    runs-on: ${{ matrix.os }}  # 使用matrix定义的操作系统
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            target-name: x86_64-linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            target-name: aarch64-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            target-name: x86_64-windows
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            target-name: aarch64-windows
          - os: macos-latest
            target: x86_64-apple-darwin
            target-name: x86_64-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            target-name: aarch64-macos
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Set up MSVC for Windows builds
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up cross-compilation for AArch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Configure cargo for AArch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "[target.aarch64-unknown-linux-gnu]" >> $HOME/.cargo/config
          echo "linker = 'aarch64-linux-gnu-gcc'" >> $HOME/.cargo/config

      - name: Build binary
        run: |
          BINARY_NAME="code_formatter-${{ matrix.target-name }}"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            BINARY_NAME="$BINARY_NAME.exe"
          fi
          cargo build --release --target ${{ matrix.target }} --bin code_formatter -- -C link-arg=-Wl,-soname,$BINARY_NAME
          mv "./target/${{ matrix.target }}/release/code_formatter" "./target/${{ matrix.target }}/release/$BINARY_NAME"
        working-directory: ${{ github.workspace }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target-name }}
          path: target/${{ matrix.target }}/release/code_formatter-${{ matrix.target-name }}${{ endsWith(matrix.os, 'windows-latest') && '.exe' || '' }}


  release:
    needs: build
    runs-on: ubuntu-latest  # 这里可以维持 ubuntu-latest，因为它不依赖于构建平台
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ format('{0} {1}', github.event.inputs.release_name || 'Release', github.ref_name) }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./code_formatter-${{ matrix.target-name }}${{ endsWith(matrix.os, 'windows-latest') && '.exe' || '' }}
          asset_name: code_formatter-${{ matrix.target-name }}${{ endsWith(matrix.os, 'windows-latest') && '.exe' || '' }}
          asset_content_type: application/octet-stream


